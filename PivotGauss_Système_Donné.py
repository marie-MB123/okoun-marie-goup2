import numpy as np
def pivot_gauss_systeme_specifique():
    """
    R√©sout le syst√®me sp√©cifique par la m√©thode du pivot de Gauss:
    x + y = 1
    x - y = 1
    3x + y = 3
    """
    print("=" * 60)
    print("R√âSOLUTION DU SYST√àME PAR PIVOT DE GAUSS")
    print("=" * 60)
    print("Syst√®me √† r√©soudre:")
    print("x + y = 1")
    print("x - y = 1")
    print("3x + y = 3")
    print()
   
    # Matrice des coefficients A (3 √©quations, 2 inconnues)
    A = np.array([
        [1, 1],    # √âquation 1: x + y
        [1, -1],   # √âquation 2: x - y
        [3, 1]     # √âquation 3: 3x + y
    ], dtype=float)
   
    # Vecteur des constantes b
    b = np.array([1, 1, 3], dtype=float)
   
    print("Matrice des coefficients A:")
    print(A)
    print("\nVecteur des constantes b:")
    print(b)
   
    # Cr√©ation de la matrice augment√©e [A|b]
    Ab = np.column_stack([A, b])
    print("\n" + "=" * 40)
    print("MATRICE AUGMENT√âE INITIALE [A|b]:")
    print("=" * 40)
    print_matrix_augmentee(Ab)
   
    # √âtape 1: Utiliser la premi√®re √©quation comme pivot
    print("\n" + "=" * 40)
    print("√âTAPE 1 - PIVOT SUR LA PREMI√àRE LIGNE")
    print("=" * 40)
   
    pivot_ligne = 0  # Premi√®re ligne comme pivot
    pivot_valeur = Ab[pivot_ligne, 0]
   
    print(f"Pivot: L1, valeur = {pivot_valeur}")
   
    # √âliminer x de la deuxi√®me √©quation
    ligne_cible = 1
    facteur = Ab[ligne_cible, 0] / pivot_valeur
    print(f"\n√âlimination de x dans L2:")
    print(f"Facteur = {Ab[ligne_cible, 0]} / {pivot_valeur} = {facteur}")
   
    Ab[ligne_cible] = Ab[ligne_cible] - facteur * Ab[pivot_ligne]
    print("Nouvelle L2 = L2 - (facteur) √ó L1")
    print_matrix_augmentee(Ab)
   
    # √âliminer x de la troisi√®me √©quation
    ligne_cible = 2
    facteur = Ab[ligne_cible, 0] / pivot_valeur
    print(f"\n√âlimination de x dans L3:")
    print(f"Facteur = {Ab[ligne_cible, 0]} / {pivot_valeur} = {facteur}")
   
    Ab[ligne_cible] = Ab[ligne_cible] - facteur * Ab[pivot_ligne]
    print("Nouvelle L3 = L3 - (facteur) √ó L1")
    print_matrix_augmentee(Ab)
   
    # √âtape 2: Utiliser la deuxi√®me √©quation comme pivot pour y
    print("\n" + "=" * 40)
    print("√âTAPE 2 - PIVOT SUR LA DEUXI√àME LIGNE")
    print("=" * 40)
   
    pivot_ligne = 1  # Deuxi√®me ligne comme pivot
    pivot_valeur = Ab[pivot_ligne, 1]
   
    print(f"Pivot: L2, valeur = {pivot_valeur}")
   
    # √âliminer y de la troisi√®me √©quation
    ligne_cible = 2
    facteur = Ab[ligne_cible, 1] / pivot_valeur
    print(f"\n√âlimination de y dans L3:")
    print(f"Facteur = {Ab[ligne_cible, 1]} / {pivot_valeur} = {facteur}")
   
    Ab[ligne_cible] = Ab[ligne_cible] - facteur * Ab[pivot_ligne]
    print("Nouvelle L3 = L3 - (facteur) √ó L2")
    print_matrix_augmentee(Ab)
   
    # V√©rification du syst√®me
    print("\n" + "=" * 40)
    print("V√âRIFICATION DU SYST√àME")
    print("=" * 40)
   
    # La troisi√®me √©quation devrait donner 0 = 0
    eq3_constante = Ab[2, 2]
    print(f"Troisi√®me √©quation apr√®s √©limination: 0 = {eq3_constante}")
   
    if abs(eq3_constante) < 1e-10:
        print("‚úì La troisi√®me √©quation est coh√©rente (0 = 0)")
        print("‚úì Le syst√®me est compatible")
    else:
        print("‚úó La troisi√®me √©quation est incoh√©rente")
        print("‚úó Le syst√®me n'a pas de solution")
        return None
   
    # R√©solution par substitution arri√®re
    print("\n" + "=" * 40)
    print("SUBSTITUTION ARRI√àRE")
    print("=" * 40)
   
    # √Ä ce stade, nous avons:
    # L1: x + y = 1
    # L2: -2y = 0
   
    # R√©solution pour y √† partir de L2
    y = Ab[1, 2] / Ab[1, 1]
    print(f"Calcul de y:")
    print(f"y = {Ab[1, 2]} / {Ab[1, 1]} = {y}")
   
    # R√©solution pour x √† partir de L1
    x = (Ab[0, 2] - Ab[0, 1] * y) / Ab[0, 0]
    print(f"\nCalcul de x:")
    print(f"x = ({Ab[0, 2]} - {Ab[0, 1]} √ó {y}) / {Ab[0, 0]} = {x}")
   
    return x, y
def print_matrix_augmentee(Ab):
    """
    Affiche la matrice augment√©e de mani√®re format√©e
    """
    n, m = Ab.shape
    print("[" + " "*3, end="")
    for j in range(m-1):
        print(f"x{j+1:8}", end="")
    print(f" |{'constante':>10}]")
   
    for i in range(n):
        ligne = f"L{i+1} ["
        for j in range(m-1):
            ligne += f"{Ab[i, j]:8.2f}"
        ligne += f" | {Ab[i, -1]:10.2f}]"
        print(ligne)
def verifier_solution(x, y):
    """
    V√©rifie que la solution satisfait toutes les √©quations
    """
    print("\n" + "=" * 50)
    print("V√âRIFICATION DE LA SOLUTION")
    print("=" * 50)
   
    print(f"Solution trouv√©e: x = {x:.6f}, y = {y:.6f}")
    print()
   
    # V√©rification de chaque √©quation
    eq1 = x + y
    eq2 = x - y
    eq3 = 3*x + y
   
    print("√âquation 1: x + y = 1")
    print(f"  {x:.6f} + {y:.6f} = {eq1:.6f} ‚Üí {'‚úì' if abs(eq1 - 1) < 1e-10 else '‚úó'}")
   
    print("√âquation 2: x - y = 1")
    print(f"  {x:.6f} - {y:.6f} = {eq2:.6f} ‚Üí {'‚úì' if abs(eq2 - 1) < 1e-10 else '‚úó'}")
   
    print("√âquation 3: 3x + y = 3")
    print(f"  3√ó{x:.6f} + {y:.6f} = {eq3:.6f} ‚Üí {'‚úì' if abs(eq3 - 3) < 1e-10 else '‚úó'}")
   
    # V√©rification globale
    erreur_totale = abs(eq1 - 1) + abs(eq2 - 1) + abs(eq3 - 3)
    print(f"\nErreur totale: {erreur_totale:.2e}")
   
    if erreur_totale < 1e-10:
        print("\nüéâ SOLUTION VALID√âE AVEC SUCC√àS!")
        print(f"‚úÖ x = {x}")
        print(f"‚úÖ y = {y}")
    else:
        print("\n‚ùå Solution incorrecte!")
def main():
    """
    Programme principal
    """
    print("SYST√àME D'√âQUATIONS LIN√âAIRES")
    print("M√©thode: Pivot de Gauss")
    print()
   
    # R√©solution du syst√®me
    resultat = pivot_gauss_systeme_specifique()
   
    if resultat is not None:
        x, y = resultat
        verifier_solution(x, y)
       
        # Affichage final
        print("\n" + "=" * 60)
        print("R√âSULTAT FINAL")
        print("=" * 60)
        print(f"La solution du syst√®me est:")
        print(f"  x = {x}")
        print(f"  y = {y}")
       
        # V√©rification num√©rique pr√©cise
        print("\nV√©rification num√©rique pr√©cise:")
        print(f"  x + y  = {x + y} (devrait √™tre 1)")
        print(f"  x - y  = {x - y} (devrait √™tre 1)")
        print(f"  3x + y = {3*x + y} (devrait √™tre 3)")
    else:
        print("Le syst√®me n'a pas de solution unique.")
if __name__ == "__main__":
    main()